int pivot(vector<int>arr, int n)
{
    int s = 0;
    int e = n - 1;
    int mid = s + (e - s) / 2;
    while (s < e)
    {
        if (arr[mid] >= arr[0])
        {
           s = mid + 1;
        }
        else
        {
            e = mid;
        }
        mid = s + (e - s) / 2;
    }
    return s;
}
int binarysearch( vector<int>arr,int start, int end,int k){
    int s = start;
     int e = end;
    int mid = s + (e -s )/2;
    while(s<=e){
        if(arr[mid]==k){
            return mid ;

        }
        else if(arr[mid]>k){
             e = mid-1;
        }
        else if(arr[mid]<k) {
            s = mid + 1;
        }
        mid = s + (e-s)/2;

    }
    return -1;
}
int search(vector<int>& arr, int n, int k)
{
    int pivote = pivot( arr,  n);
    if(arr[pivote]<=k && arr[n-1]>=k){
        return binarysearch(arr,pivote,n-1,k);
    }
    else{
        return binarysearch(arr,0,pivote-1,k);
    }

}
